/**
 *  CUSTOM TEMPLATE
 *
 *  AVAILABLE PROPERTIES:
 *
 *  params: {importPath: string, type: string} <% params.forEach(p => { %>
 *  importPath: <%= p.importPath %>
 *  type: <%= p.type %>
 *  <% }) %>
 *  specFileName: <%= specFileName %>
 *  normalizedName: <%= normalizedName %>
 *  normalizedName: <%= normalizedName %>
 *  className: <%= className %>
 *  publicMethods: <%= publicMethods %>
 *  declaration: <%= declaration %>
 *  builderExports: <%= builderExports %>
 *  constructorParams: <%= constructorParams %>
 *  shorthand: <%= shorthand %>
 *
 */
<% params.forEach(p => { if(p.importPath) {%>import { <%= p.type %> } from '<%= p.importPath %>';
<% }}) %>import { <%= className %> } from './<%= normalizedName %>';
import { autoSpy } from 'autoSpy';

describe('<%= className %>', () => {
  <% publicMethods.forEach(meth=> {if(meth != '') { %>it('when <%= meth %> is called it should', () => {
    // arrange
    const { build } = setup().default();
    const <%= shorthand %> = build();
    // act
    <%= shorthand %>.<%= meth %>();
    // assert
    // expect(<%= shorthand %>).toEqual
  });
  <% } else { %>
  it('it should construct', () => {
    // arrange
    const { build } = setup().default();
    // act
    const <%= shorthand %> = build();
    // assert
    // expect(<%= shorthand %>).toEqual
  });
  <% }}) %>
});

// tslint-disable-type
function setup() {
  <%= declaration %>const builder = {
    <%= builderExports %>default() {
      return builder;
    },
    build() {
      return new <%= className %>(<%= constructorParams %>);
    }
  };

  return builder;
}
